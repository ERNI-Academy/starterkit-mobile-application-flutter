name: Code Analysis

on:
  push:
    paths:
      - .github/**/*.yml
      - scripts/**
      - starterkit_app/**
    branches:
      - main

  pull_request:
    paths:
      - .github/**/*.yml
      - scripts/**
      - starterkit_app/**
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PROJECT_WORKING_DIRECTORY: "starterkit_app"

permissions:
  contents: read

jobs:
  run-code-analysis:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@8ca2b8b2ece13480cda6dacd3511b49857a23c09 # v2.5.1
        with:
          egress-policy: audit

      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3

      - name: Install Flutter
        uses: ./.github/workflows/steps/install-flutter
        with:
          working_directory: ${{ env.PROJECT_WORKING_DIRECTORY }}

      - name: Check formatting
        run: dart format --line-length=120 --set-exit-if-changed .
        working-directory: ${{ env.PROJECT_WORKING_DIRECTORY }}

      - name: Check for duplicate lines of code and generate badge
        run: |
          npm install -g jscpd
          npx jscpd lib --reporters consoleFull --threshold 5
        working-directory: ${{ env.PROJECT_WORKING_DIRECTORY }}

      - name: Run code generation
        uses: ./.github/workflows/steps/run-pub-get-and-code-generation
        with:
          generate_intl: "true"
          working_directory: ${{ env.PROJECT_WORKING_DIRECTORY }}

      - name: Run Dart code analysis
        run: |
          dart analyze .
        working-directory: ${{ env.PROJECT_WORKING_DIRECTORY }}

      - name: Install DCM
        uses: CQLabs/setup-dcm@276868e2e47402b2a14a252afa353602d41f06ae # v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run DCM code analysis
        uses: CQLabs/dcm-action@2e4824ceb01e79a65334c66deb665093c7b68d38 # v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          ci_key: ${{ secrets.DCM_CI_KEY }}
          email: ${{ secrets.DCM_CI_EMAIL }}
          folders: ${{ env.PROJECT_WORKING_DIRECTORY }}/lib

      - name: Run DCM code checks
        run: |
          # Running checks for unnecessary nullable parameters
          dcm check-unnecessary-nullable lib --ci-key ${{ secrets.DCM_CI_KEY }} --email ${{ secrets.DCM_CI_EMAIL }}

          # Running checks for unused files
          # Add `--fatal-unused` if you want to fail this step if there are unused files
          dcm check-unused-files lib --ci-key ${{ secrets.DCM_CI_KEY }} --email ${{ secrets.DCM_CI_EMAIL }} --no-fatal-unused

          # Running checks for unused code
          # Add `--fatal-unused` if you want to fail this step if there are unused code
          dcm check-unused-code lib --ci-key ${{ secrets.DCM_CI_KEY }} --email ${{ secrets.DCM_CI_EMAIL }} --no-fatal-unused

          # Running checks for unused localizations
          dcm check-unused-l10n lib --ci-key ${{ secrets.DCM_CI_KEY }} --email ${{ secrets.DCM_CI_EMAIL }}
        working-directory: ${{ env.PROJECT_WORKING_DIRECTORY }}
