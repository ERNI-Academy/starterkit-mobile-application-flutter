plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def dartDefines = [:]
if (project.hasProperty('dart-defines')) {
    // Decode dart-defines, which are comma-separated and encoded in Base64, and store them in a variable.
    dartDefines = dartDefines + project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                [(pair.first()): pair.last()]
            }
}

// Check keystore file
def keystoreProperties = new Properties()
def keyStorePropertiesFileName = 'Distribution.keystore.properties'
def keystorePropertiesFile = file(keyStorePropertiesFileName)
def keystorePropertiesFileExists = keystorePropertiesFile.exists()
def keystoreFileExists = false

if (keystorePropertiesFileExists) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    def keystoreFile = file(keystoreProperties['storeFile'])
    keystoreFileExists = keystoreFile.exists()
    if (keystoreFileExists) {
        println 'Signing with provided keystore'
    } else {
        println 'Could not find signing keystore, using debug'
    }
} else {
    println 'Could not find signing keystore, using debug'
}


// Uncomment this line if using google-services.json
// Decode provided base64 google-services.json
// if (androidGoogleServicesJson?.trim()) {
//     def encoded = androidGoogleServicesJson
//     def decoded = new String(encoded.decodeBase64())
//     def googleServicesJsonFile = new File("app/google-services.json")
//     googleServicesJsonFile.write(decoded)
// }

//  If `appIdSuffix` is not set (prod env), for some reason it will have a default value of `appIdSuffix` ¯\_(ツ)_/¯
def appIdSuffix = dartDefines.appIdSuffix != 'appIdSuffix' ? dartDefines.appIdSuffix : ''
def appIdComplete = "${dartDefines.appId}${appIdSuffix}" 
println "Building: ${dartDefines.appName} (${appIdComplete}) for ${dartDefines.appEnvironment} environment"

android {
    namespace 'com.example.starterkit.app'
    compileSdk 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "${dartDefines.appId}"
        if (appIdSuffix?.trim()) {
            applicationIdSuffix appIdSuffix
        }
        minSdkVersion 31
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        resValue "string", "app_name", "${dartDefines.appName}"
    }

    signingConfigs {
        if (keystoreFileExists) {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
            multiDexEnabled true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig keystoreFileExists ? signingConfigs.release : signingConfigs.debug
        }

        debug {
            signingConfig keystoreFileExists ? signingConfigs.release : signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}