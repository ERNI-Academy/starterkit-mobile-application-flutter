// Workspace-specific code snippets
{
    "Concrete/abstract interface class": {
        "prefix": "cac",
        "body": [
            "abstract interface class $className {}",
            "",
            "class ${className}Impl implements $className {}",
        ],
        "description": "Creates an abstract interface class and a class to implement it"
    },
    "Creates a ViewModel class": {
        "prefix": "vm",
        "body": [
            "import 'package:injectable/injectable.dart';",
            "",
            "@injectable",
            "class ${name}ViewModel extends ViewModel {",
            "}"
        ],
        "description": "Creates a ViewModel class"
    },
    "Change Notifier Property": {
        "prefix": "propn",
        "body": [
            "$type _$prop;",
            "$type get $prop => _$prop;",
            "set $prop($type value) {",
            "\tif (_$prop != value) {",
            "\t_$prop = value;",
            "\tnotifyListeners();",
            "\t}",
            "}",
        ],
        "description": "Creates a ChangeNotifier property"
    },
    "Value Notifier Property": {
        "prefix": "propv",
        "body": [
            "final $name = ValueNotifier($type(data: $initialValue));",
        ],
        "description": "Creates a ValueNotifier property"
    },
    "Getter Property with Field": {
        "prefix": "propgf",
        "body": [
            "$type _$prop;",
            "$type get $prop => _$prop;",
        ],
        "description": "Creates a getter property with field"
    },
    "Value Listenable Builder": {
        "prefix": "valb",
        "body": [
            "ValueListenableBuilder<$type>(",
            "  valueListenable: $valueListenable,",
            "  builder: (context, value, child) {",
            "    throw UnimplementedError();",
            "  },",
            ")"
        ],
        "description": "Creates a ValueListenableBuilder"
    },
    "Creates a navigatable view using a stateless widget": {
        "prefix": "vrsl",
        "body": [
            "// coverage:ignore-file",
            "",
            "class ${1}View extends StatelessWidget with ViewRouteMixin<${1}ViewModel> {",
            "  const ${1}View() : super(key: const Key(${1}ViewRoute.name));",
            "",
            "  @override",
            "  Widget buildView(BuildContext context, ${1}ViewModel viewModel) {",
            "    return Scaffold(",
            "      appBar: AppBar(",
            "        title: const Text('${1}'),",
            "      ),",
            "    );",
            "  }",
            "}"
        ],
        "description": "Creates a navigatable view using a stateless widget",
    },
    "Creates a navigatable view using a stateful widget": {
        "prefix": "vrsf",
        "body": [
            "// coverage:ignore-file",
            "",
            "class ${1}View extends StatefulWidget {",
            "  const ${1}View() : super(key: const Key(${1}ViewRoute.name));",
            "",
            "  @override",
            "  State<${1}View> createState() => _${1}ViewState();",
            "}",
            "",
            "class _${1}ViewState extends State<${1}View> with ViewRouteMixin<${1}ViewModel> {",
            "  @override",
            "  Widget buildView(BuildContext context, ${1}ViewModel viewModel) {",
            "    return Scaffold(",
            "      appBar: AppBar(",
            "        title: const Text('${1}'),",
            "      ),",
            "    );",
            "  }",
            "}",
            ""
        ],
        "description": "Creates a navigatable view using a stateful widget"
    },
    "Creates a view using a stateless widget": {
        "prefix": "vsl",
        "body": [
            "// coverage:ignore-file",
            "",
            "class ${1}View extends StatelessWidget with ViewMixin<${1}ViewModel> {",
            "  const ${1}View({super.key});",
            "",
            "  @override",
            "  Widget buildView(BuildContext context, ${1}ViewModel viewModel) {",
            "    return Scaffold(",
            "      appBar: AppBar(",
            "        title: const Text('${1}'),",
            "      ),",
            "    );",
            "  }",
            "}"
        ],
        "description": "Creates a view using a stateless widget",
    },
    "Creates a view using a stateful widget": {
        "prefix": "vsf",
        "body": [
            "// coverage:ignore-file",
            "",
            "class ${1}View extends StatefulWidget {",
            "  const ${1}View({super.key});",
            "",
            "  @override",
            "  State<${1}View> createState() => _${1}ViewState();",
            "}",
            "",
            "class _${1}ViewState extends State<${1}View> with ViewMixin<${1}ViewModel> {",
            "  @override",
            "  Widget buildView(BuildContext context, ${1}ViewModel viewModel) {",
            "    return Scaffold(",
            "      appBar: AppBar(",
            "        title: const Text('${1}'),",
            "      ),",
            "    );",
            "  }",
            "}",
            ""
        ],
        "description": "Creates a view using a stateful widget"
    },
    "Creates a child view using a stateless widget": {
        "prefix": "cvsl",
        "body": [
            "class ${0} extends StatelessWidget with ChildViewMixin<${1}ViewModel> {",
            "  const ${0}();",
            "",
            "  @override",
            "  Widget buildView(BuildContext context, ${1}ViewModel viewModel) {",
            "    return const Text('${0}');",
            "  }",
            "}",
        ],
        "description": "Creates a child view using a stateless widget",
    },
    "Creates a child view using a stateful widget": {
        "prefix": "cvsf",
        "body": [
            "class ${0} extends StatefulWidget {",
            "  const ${0}();",
            "",
            "  @override",
            "  State<${0}> createState() => _${0}State();",
            "}",
            "",
            "class _${0}State extends State<${0}> with ChildViewMixin<${1}ViewModel> {",
            "  @override",
            "  Widget buildView(BuildContext context, ${1}ViewModel viewModel) {",
            "    return const Text('${0}');",
            "  }",
            "}",
        ],
        "description": "Creates a child view using a stateful widget"
    },
    "Creates an injectable dependency": {
        "prefix": "dep",
        "body": [
            "import 'package:injectable/injectable.dart';",
            "",
            "abstract interface class ${name} {}",
            "",
            "@LazySingleton(as: ${name})",
            "class ${name}Impl implements ${name} {}"
        ],
        "description": "Creates an injectable dependency"
    },
    "Init View Model": {
        "prefix": "initVm",
        "body": [
            "@override",
            "Future<void> onInitialize() async {",
            "  ",
            "}"
        ],
        "description": "Override init view model"
    },
    "Creates a Data Contract class": {
        "prefix": "dataC",
        "body": [
            "part '${TM_FILENAME_BASE}.g.dart';",
            "",
            "@JsonSerializable()",
            "class ${name}Contract extends DataContract {",
            "  const ${name}Contract();",
            "",
            "  factory ${name}Contract.fromJson(Map<String, dynamic> json) => _$${name}ContractFromJson(json);",
            "",
            "  @override",
            "  Map<String, dynamic> toJson() => _$${name}ContractToJson(this);",
            "}"
        ],
        "description": "Creates a JSON class"
    },
    "Creates a JSON class": {
        "prefix": "jsonC",
        "body": [
            "part '${TM_FILENAME_BASE}.g.dart';",
            "",
            "@immutable",
            "@JsonSerializable()",
            "class ${name} extends JsonSerializableObject {",
            "  const ${name}();",
            "",
            "  factory ${name}.fromJson(Map<String, dynamic> json) => _$${name}FromJson(json);",
            "",
            "  @override",
            "  Map<String, dynamic> toJson() => _$${name}ToJson(this);",
            "}"
        ],
        "description": "Creates a JSON class"
    },
    "Create test group": {
        "prefix": "gtest",
        "body": [
            "import 'package:flutter_test/flutter_test.dart';",
            "",
            "void main() {",
            "  group(${UnitToTest}, () {",
            "",
            "\tsetUp(() {",
            "\t  // Setup your mocks here",
            "\t});",
            "",
            "\t${UnitToTest} createUnitToTest() {",
            "\t  return ${UnitToTest}();",
            "\t}",
            "",
            "\tgroup('{methodToTest}', () {",
            "\ttest('should {expected} when {condition}', () {",
            "\t  // Arrange",
            "\t  final unit = createUnitToTest();",
            "",
            "\t  // Act",
            "",
            "\t  // Assert",
            "\t});",
            "\t});",
            "  });",
            "}"
        ]
    },
    "Creates an retrofit API": {
        "prefix": "api",
        "body": [
            "import 'package:injectable/injectable.dart';",
            "",
            "part '${TM_FILENAME_BASE}.g.dart';",
            "",
            "@LazySingleton(as: ${ApiName}Api)",
            "@RestApi()",
            "abstract interface class ${ApiName}ApiImpl implements ${ApiName}Api{",
            "  @factoryMethod",
            "  factory ${ApiName}ApiImpl(DioProvider dioProvider) => _${ApiName}ApiImpl(dioProvider.create<${ApiName}ApiImpl>());",
            "}"
        ],
        "description": "Creates an retrofit API"
    },
}