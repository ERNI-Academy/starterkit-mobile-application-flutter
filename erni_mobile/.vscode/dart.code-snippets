// Workspace-specific code snippets
{
    "Concrete/abstract class": {
        "prefix": "cac",
        "body": [
            "abstract class $className {}",
            "",
            "class ${className}Impl implements $className {}",
        ],
        "description": "Creates an abstract class and a class to implement it"
    },
    "Creates a ViewModel class": {
        "prefix": "vm",
        "body": [
            "import 'package:erni_mobile/domain/ui/view_models/view_model.dart';",
            "import 'package:injectable/injectable.dart';",
            "",
            "@injectable",
            "class ${name}ViewModel extends ViewModel {",
            "}"
        ],
        "description": "Creates a ViewModel class"
    },
    "Change Notifier Property": {
        "prefix": "propn",
        "body": [
            "$type _$prop;",
            "$type get $prop => _$prop;",
            "set $prop($type value) {",
            "\tif (_$prop != value) {",
            "\t_$prop = value;",
            "\tnotifyListeners();",
            "\t}",
            "}",
        ],
        "description": "Creates a Change Notifier property"
    },
    "Value Notifier Property": {
        "prefix": "propv",
        "body": [
            "final $name = ValueNotifier($type(data: $initialValue));",
        ],
        "description": "Creates an abstract class and a class to implement it"
    },
    "Getter Property with Field": {
        "prefix": "propgf",
        "body": [
            "$type _$prop;",
            "$type get $prop => _$prop;",
        ],
        "description": "Creates an abstract class and a class to implement it"
    },
    "Value Listenable Builder": {
        "prefix": "valb",
        "body": [
            "ValueListenableBuilder<$type>(",
            "  valueListenable: $valueListenable,",
            "  builder: (context, value, child) {",
            "    throw UnimplementedError();",
            "  },",
            ")"
        ],
        "description": "Creates an abstract class and a class to implement it"
    },
    "Creates a View class": {
        "prefix": "vsl",
        "body": [
            "// coverage:ignore-file",
            "",
            "import 'package:erni_mobile/common/constants/route_names.dart';",
            "import 'package:erni_mobile/domain/ui/views/view_mixin.dart';",
            "import 'package:erni_mobile/ui/widgets/widgets.dart';",
            "import 'package:injectable/injectable.dart';",
            "",
            "@Named(RouteNames.${1/(.*)/${1:/downcase}/})",
            "@Injectable(as: Widget)",
            "class ${1}View extends StatelessWidget with ViewMixin<${1}ViewModel> {",
            "  const ${1}View() : super(key: const Key(RouteNames.${1/(.*)/${1:/downcase}/}));",
            "",
            "  @override",
            "  Widget buildView(BuildContext context, ${1}ViewModel viewModel) {",
            "    return Scaffold(",
            "      appBar: AppBar(",
            "        title: const Text('${1}'),",
            "      ),",
            "    );",
            "  }",
            "}"
        ],
        "description": "Creates a Stateless Widget as a View class",
    },
    "Creates a stateful view": {
        "prefix": "vsf",
        "body": [
            "// coverage:ignore-file",
            "",
            "import 'package:erni_mobile/common/constants/route_names.dart';",
            "import 'package:erni_mobile/domain/ui/views/view_mixin.dart';",
            "import 'package:erni_mobile/ui/widgets/widgets.dart';",
            "import 'package:injectable/injectable.dart';",
            "",
            "@Named(RouteNames.${1/(.*)/${1:/downcase}/})",
            "@Injectable(as: Widget)",
            "class ${1}View extends StatefulWidget {",
            "  const ${1}View() : super(key: const Key(RouteNames.${1/(.*)/${1:/downcase}/}));",
            "",
            "  @override",
            "  State<${1}View> createState() => _${1}ViewState();",
            "}",
            "",
            "class _${1}ViewState extends State<${1}View> with ViewMixin<${1}ViewModel> {",
            "  @override",
            "  Widget buildView(BuildContext context, ${1}ViewModel viewModel) {",
            "    return Scaffold(",
            "      appBar: AppBar(",
            "        title: const Text('${1}'),",
            "      ),",
            "    );",
            "  }",
            "}",
            ""
        ],
        "description": "Creates a stateful view"
    },
    "Creates an injectable dependency": {
        "prefix": "dep",
        "body": [
            "import 'package:injectable/injectable.dart';",
            "",
            "abstract class ${name} {}",
            "",
            "@LazySingleton(as: ${name})",
            "class ${name}Impl implements ${name} {}"
        ],
        "description": "Creates an injectable dependency"
    },
    "Init View Model": {
        "prefix": "initVm",
        "body": [
            "@override",
            "Future<void> onInitialize([Object? parameter, Queries queries = const {}]) async {",
            "  ",
            "}"
        ],
        "description": "Override init view model"
    },
    "Creates a Domain Entity": {
        "prefix": "dome",
        "body": [
            "import 'package:erni_mobile/domain/models/entities/entity.dart';",
            "",
            "class ${Name}Entity implements Entity {",
            "  const ${Name}Entity();",
            "}"
        ],
        "description": "Creates a Domain Entity"
    },
    "Creates a Data Contract class": {
        "prefix": "dataC",
        "body": [
            "import 'package:erni_mobile/domain/models/data_contracts/data_contract.dart';",
            "",
            "part '${TM_FILENAME_BASE}.g.dart';",
            "",
            "@JsonSerializable()",
            "class ${name}Contract extends DataContract {",
            "  const ${name}Contract();",
            "",
            "  factory ${name}Contract.fromJson(Map<String, dynamic> json) => _$${name}ContractFromJson(json);",
            "",
            "  @override",
            "  Map<String, dynamic> toJson() => _$${name}ContractToJson(this);",
            "}"
        ],
        "description": "Creates a JSON class"
    },
    "Creates a JSON class": {
        "prefix": "jsonC",
        "body": [
            "",
            "import 'package:erni_mobile/domain/models/data_contract.dart';",
            "import 'package:meta/meta.dart';",
            "",
            "part '${TM_FILENAME_BASE}.g.dart';",
            "",
            "@immutable",
            "@JsonSerializable()",
            "class ${name} extends JsonEncodable {",
            "  const ${name}();",
            "",
            "  factory ${name}.fromJson(Map<String, dynamic> json) => _$${name}FromJson(json);",
            "",
            "  @override",
            "  Map<String, dynamic> toJson() => _$${name}ToJson(this);",
            "}"
        ],
        "description": "Creates a JSON class"
    },
    "Creates a Data Contract from Entity Mapper": {
        "prefix": "mapde",
        "body": [
            "import 'package:injectable/injectable.dart';",
            "import 'package:smartstruct/smartstruct.dart';",
            "",
            "part '${TM_FILENAME_BASE}.mapper.g.dart';",
            "",
            "@Mapper(useInjection: true)",
            "abstract class ${name}ContractFromEntityMapper",
            "    extends ContractFromEntityMapper<${name}Contract, ${name}Entity> {",
            "",
            "  @override",
            "  ${name}Contract? fromEntity(${name}Entity? entity);",
            "}"
        ],
        "description": ""
    },
    "Creates a Data Contract from Data Object Mapper": {
        "prefix": "mapdo",
        "body": [
            "import 'package:injectable/injectable.dart';",
            "import 'package:smartstruct/smartstruct.dart';",
            "",
            "part '${TM_FILENAME_BASE}.mapper.g.dart';",
            "",
            "@Mapper(useInjection: true)",
            "abstract class ${name}ContractFromObjectMapper",
            "    extends ContractFromObjectMapper<${name}Contract, ${name}Object> {",
            "",
            "  @override",
            "  ${name}Contract? fromObject(${name}Object? object);",
            "}"
        ],
        "description": ""
    },
    "Creates an Entity from Data Contract Mapper": {
        "prefix": "maped",
        "body": [
            "import 'package:injectable/injectable.dart';",
            "import 'package:smartstruct/smartstruct.dart';",
            "",
            "part '${TM_FILENAME_BASE}.mapper.g.dart';",
            "",
            "@Mapper(useInjection: true)",
            "abstract class ${name}EntityFromContractMapper",
            "    extends EntityFromContractMapper<${name}Entity, ${name}Contract> {",
            "",
            "  @override",
            "  ${name}Entity? fromContract(${name}Contract? contract);",
            "}"
        ],
        "description": ""
    },
    "Creates a Data Object from Data Contract Mapper": {
        "prefix": "mapod",
        "body": [
            "import 'package:injectable/injectable.dart';",
            "import 'package:smartstruct/smartstruct.dart';",
            "",
            "part '${TM_FILENAME_BASE}.mapper.g.dart';",
            "",
            "@Mapper(useInjection: true)",
            "abstract class ${name}ObjectFromContractMapper",
            "    extends ObjectFromContractMapper<${name}Object, ${name}Contract> {",
            "",
            "  @override",
            "  ${name}Object? fromContract(${name}Contract? contract);",
            "}"
        ],
        "description": ""
    },
    "Creates a Data Object from Entity Mapper": {
        "prefix": "mapoe",
        "body": [
            "import 'package:injectable/injectable.dart';",
            "import 'package:smartstruct/smartstruct.dart';",
            "",
            "part '${TM_FILENAME_BASE}.mapper.g.dart';",
            "",
            "@Mapper(useInjection: true)",
            "abstract class ${name}ObjectFromEntityMapper",
            "    extends ObjectFromEntityMapper<${name}Object, ${name}Entity> {",
            "",
            "  @override",
            "  ${name}Object? fromEntity(${name}Entity? entity);",
            "}"
        ],
        "description": ""
    },
    "Creates an Entity from Data Object Mapper": {
        "prefix": "mapeo",
        "body": [
            "import 'package:injectable/injectable.dart';",
            "import 'package:smartstruct/smartstruct.dart';",
            "",
            "part '${TM_FILENAME_BASE}.mapper.g.dart';",
            "",
            "@Mapper(useInjection: true)",
            "abstract class ${name}EntityFromObjectMapper",
            "    extends EntityFromObjectMapper<${name}Entity, ${name}Object> {",
            "",
            "  @override",
            "  ${name}Entity? fromObject(${name}Object? object);",
            "}"
        ],
        "description": ""
    },
    "Create test group": {
        "prefix": "gtest",
        "body": [
            "import 'package:flutter_test/flutter_test.dart';",
            "",
            "void main() {",
            "  group(${UnitToTest}, () {",
            "",
            "\tsetUp(() {",
            "\t  // Setup your mocks here",
            "\t});",
            "",
            "\t${UnitToTest} createUnitToTest() {",
            "\t  return ${UnitToTest}();",
            "\t}",
            "",
            "\ttest('{methodToTest} should {expected} when {condition}', () {",
            "\t  // Arrange",
            "\t  final unit = createUnitToTest();",
            "",
            "\t  // Act",
            "",
            "\t  // Assert",
            "\t});",
            "  });",
            "}"
        ]
    },
    "Creates an retrofit API": {
        "prefix": "api",
        "body": [
            "import 'package:erni_mobile/data/web/apis/api.dart';",
            "import 'package:injectable/injectable.dart';",
            "",
            "part '${TM_FILENAME_BASE}.g.dart';",
            "",
            "abstract class ${ServiceName}Api{",
            "}",
            "",
            "@LazySingleton(as: ${ServiceName}Api)",
            "@RestApi()",
            "abstract class ${ServiceName}ApiImpl{",
            "  @factoryMethod",
            "  factory ${ServiceName}ApiImpl(@apiBaseUrl String baseUrl) => _${ServiceName}ApiImpl(DioProvider.create(serviceName: '${ServiceName}Api'), baseUrl: baseUrl);",
            "}"
        ],
        "description": "Creates an retrofit API"
    },
    "Creates a repository class": {
        "prefix": "repo",
        "body": [
            "import 'package:erni_mobile/data/database/repository.dart';",
            "import 'package:erni_mobile/domain/repositories/repository.dart';",
            "import 'package:injectable/injectable.dart';",
            "",
            "abstract class ${2}Repository implements Repository<${2}s, ${2}Object> {}",
            "",
            "@LazySingleton(as: ${2}Repository)",
            "class ${2}RepositoryImpl extends BaseRepository<${1}, ${2}s, ${2}Object> implements ${2}Repository {",
            "  ${2}RepositoryImpl(${1} db) : super(db);",
            "}"
        ],
        "description": "Creates a repository class"
    },
    "Creates a data table class": {
        "prefix": "dtbl",
        "body": [
            "import 'package:drift/drift.dart';",
            "import 'package:erni_mobile/domain/models/data/data_table.dart';",
            "",
            "@DataClassName('${1}Object')",
            "class ${1}s extends DataTable {}"
        ],
        "description": "Creates a data object class"
    }
}