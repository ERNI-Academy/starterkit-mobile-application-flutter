def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"


// Check keystore file

def keystoreProperties = new Properties()
def keyStorePropertiesFileName = 'ERNI Mobile Generic Keystore.keystore.properties'
def keystorePropertiesFile = file(keyStorePropertiesFileName)
def keystorePropertiesFileExists = keystorePropertiesFile.exists()
def keystoreFileExists = false

if (keystorePropertiesFileExists) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    def keystoreFile = file(keystoreProperties['storeFile'])
    keystoreFileExists = keystoreFile.exists()
    if (keystoreFileExists) {
        println 'Signing with provided keystore'
    } else {
        println 'Could not find signing keystore, using debug'
    }
} else {
    println 'Could not find signing keystore, using debug'
}

// Extract Dart defines

def dartDefines = [
    appIdSuffix: '',
    appName: '',
    appUniversalLink: '',
];

if (project.hasProperty('dart-defines')) {
    dartDefines = dartDefines + project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                [(pair.first()): pair.last()]
            }

    // Uncomment this line if using google-services.json
    // Decode provided base64 google-services.json
    // if (dartDefines.androidGoogleServicesJson?.trim()) {
    //     def encoded = dartDefines.androidGoogleServicesJson
    //     def decoded = new String(encoded.decodeBase64())
    //     def googleServicesJsonFile = new File("app/google-services.json")
    //     googleServicesJsonFile.write(decoded)
    // }
}

android {
    compileSdkVersion 33

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId dartDefines.appId
        minSdkVersion 30
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        resValue "string", "app_name", dartDefines.appName
        resValue "string", "app_universal_link", dartDefines.appUniversalLink
        
        // Set applicationIdSuffix. `Unknown` if dartDefines.appIdSuffix is empty in secrets file
        if (dartDefines.appIdSuffix != null && dartDefines.appIdSuffix != "Unknown") {
            applicationIdSuffix dartDefines.appIdSuffix
        }
    }

    signingConfigs {
        if (keystoreFileExists) {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
            multiDexEnabled true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig keystoreFileExists ? signingConfigs.release : signingConfigs.debug
        }

        debug {
            signingConfig keystoreFileExists ? signingConfigs.release : signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}
