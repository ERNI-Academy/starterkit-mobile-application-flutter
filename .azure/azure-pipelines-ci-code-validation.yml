parameters:
  - name: TargetEnvironment
    type: string
    default: dev

trigger:
  - master

pr:
  branches:
    include:
      - master

pool:
  vmImage: macos-latest

variables:
  - template: templates/azure-pipelines-ci-variables.yml
    parameters:
      TargetEnvironment: ${{ parameters.TargetEnvironment }}

steps:
  - template: templates/steps/install-flutter.yml

  - script: |
      npm install -g jscpd
    displayName: "Install JSCPD"

  - script: |
      flutter pub global activate junitreport
    displayName: "Install junitreport"

  - script: flutter format --line-length=120 --dry-run --set-exit-if-changed .
    displayName: "Check Formatting"
    workingDirectory: $(WorkingDirectory)

  - script: npx jscpd lib --reporters html --threshold 5
    displayName: "Check for Duplicate Lines of Code"
    workingDirectory: $(WorkingDirectory)

  - template: templates/steps/run-pub-get-and-build-runner.yml
    parameters:
      WorkingDirectory: $(CoreProjectDirectory)
      RunIntlGeneration: false

  - template: templates/steps/run-pub-get-and-build-runner.yml
    parameters:
      WorkingDirectory: $(WorkingDirectory)
      RunIntlGeneration: true

  - script: |
      echo "Running static code analysis"
      flutter analyze .

      echo "Running checks for code metrics"
      flutter pub run dart_code_metrics:metrics analyze lib --fatal-style --fatal-warnings --fatal-performance

      echo "Running checks for unused files"
      # Add `--fatal-unused` if you want to fail this step if there are unused files
      flutter pub run dart_code_metrics:metrics check-unused-files lib 

      echo "Running checks for unused code"
      # Add `--fatal-unused` if you want to fail this step if there are unused code
      flutter pub run dart_code_metrics:metrics check-unused-code lib

      echo "Running checks for unused localizations"
      # Add `--fatal-unused` if you want to fail this step if there are unused localizations
      flutter pub run dart_code_metrics:metrics check-unused-l10n -p Il8n lib
    displayName: "Run Code Analysis"
    workingDirectory: $(WorkingDirectory)

  - script: |
      find . -type f -name "*.gen.dart" -exec sh -c 'sed -i "" -e "1s/^/\/\/\ coverage:ignore-file\r\n/" "$1"' -- {} \;
      find . -type f -name "*.config.dart" -exec sh -c 'sed -i "" -e "1s/^/\/\/\ coverage:ignore-file\r\n/" "$1"' -- {} \;
      find . -type f -name "*.g.dart" -exec sh -c 'sed -i "" -e "1s/^/\/\/\ coverage:ignore-file\r\n/" "$1"' -- {} \;
      find . -type f -name "messages_*.dart" -exec sh -c 'sed -i "" -e "1s/^/\/\/\ coverage:ignore-file\r\n/" "$1"' -- {} \;
      find . -type f -name "l10n.dart" -exec sh -c 'sed -i "" -e "1s/^/\/\/\ coverage:ignore-file\r\n/" "$1"' -- {} \;
    displayName: "Add ignore coverage to generated files"
    workingDirectory: $(WorkingDirectory)

  - script: |
      # Run Tests
      mkdir coverage
      touch coverage/results.json
      flutter test --coverage --machine >> coverage/results.json

      # Generate Test Results
      flutter pub global run junitreport:tojunit -i coverage/results.json -o coverage/results.xml

      # Generate Test Coverage
      cd coverage
      python ../../scripts/cobertura.py lcov.info
    displayName: "Run Tests"
    workingDirectory: $(WorkingDirectory)

  - task: PowerShell@2
    inputs:
      targetType: "inline"
      script: |
        # Check golden test failures
        $fileExists = Test-Path -Path "test/widget_tests/**/failures/**"
        Write-Output "##vso[task.setvariable variable=isGoldenTestFailed]$fileExists"

        # Check code coverage percentage (80% minimum)
        $xml = [xml](Get-Content coverage/coverage.xml)
        $coverage = $xml.coverage | Select-Object line-rate
        $coverage = $coverage -replace "[^0-9.]" , ''
        $coverage = [double]::Parse($coverage)
        $percentage = ($coverage * 100)
        Write-Output "Covered lines: $percentage%"

        # Uncomment these lines if you want to enforce code coverage threshold
        # if($percentage -lt 100)
        # {
        #   Write-Output "##vso[task.setvariable variable=isTestCoverageAcceptable]false"
        # }
      workingDirectory: $(WorkingDirectory)
    displayName: "Check For Test Failures"

  - task: PublishPipelineArtifact@1
    displayName: "Publish Golden Test Failures"
    inputs:
      targetPath: "$(WorkingDirectory)/test/widget_tests/views/failures"
      publishLocation: "pipeline"
      artifact: "golden_test_failures"
    condition: eq(variables.isGoldenTestFailed, 'true')
    
  - bash: exit 1
    displayName: Fail build if below minimum coverage
    condition: eq(variables.isTestCoverageAcceptable, 'false')

  - task: PublishPipelineArtifact@1
    displayName: "Publish JSCPD Report"
    inputs:
      targetPath: "$(WorkingDirectory)/report"
      publishLocation: "pipeline"
      artifact: "jscpd_report"

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: "Cobertura"
      summaryFileLocation: "$(WorkingDirectory)/coverage/coverage.xml"
      pathToSources: "$(WorkingDirectory)"
      failIfCoverageEmpty: true

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: "JUnit"
      testResultsFiles: "coverage/results.xml"
      searchFolder: "$(WorkingDirectory)"
      failTaskOnFailedTests: true
